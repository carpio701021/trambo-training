AWSTemplateFormatVersion: '2010-09-09'
Description: container cluster on ECS, loadbalancer, security groups and cloudwatch

Resources:
  
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'trambo-training'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ecs-services
      Subnets:
        - !ImportValue 'Subnet1'
        - !ImportValue 'Subnet2'
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  InternalLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ecs-services-internal
      Subnets:
        - !ImportValue 'Subnet1'
        - !ImportValue 'Subnet2'
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  InternalLoadBalancerListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref InternalLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup80

  InternalLoadBalancerListener5000:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref InternalLoadBalancer
      Protocol: HTTP
      Port: 5000
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup5000

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for loadbalancer to services on ECS
      VpcId: !ImportValue 'VPC'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: default
      VpcId: !ImportValue 'VPC'
      Protocol: 'HTTP'
      Port: '80'  

  DefaultTargetGroup80:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: default-internal-80
      VpcId: !ImportValue 'VPC'
      Protocol: 'HTTP'
      Port: '80'  

  DefaultTargetGroup5000:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: default-internal-5000
      VpcId: !ImportValue 'VPC'
      Protocol: 'HTTP'
      Port: '5000'  

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'apis'
      RetentionInDays: 1

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup      
    Properties:
     VpcId: !ImportValue 'VPC'
     GroupDescription: for ecs containers
     SecurityGroupIngress:
       - SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
         IpProtocol: -1


Outputs:
  
  Cluster:
    Value: !Ref ECSCluster
    Export:
      Name: 'ECSCluster'

  Listener:
    Description: listener port 80
    Value: !Ref LoadBalancerListener
    Export:
      Name: 'Listener'

  InternalListener80:
    Description: listener port 80 internal
    Value: !Ref InternalLoadBalancerListener80
    Export:
      Name: 'InternalListener80'

  InternalListener5000:
    Description: listener port 5000 internal
    Value: !Ref InternalLoadBalancerListener5000
    Export:
      Name: 'InternalListener5000'

  ContainerSecurityGroup:
    Description: container security group
    Value: !Ref ContainerSecurityGroup
    Export:
      Name: 'ContainerSecurityGroup'

  LoadBalancerDNS:
    Description: Domain name for the loadbalancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: 'DomainName'

  InternalLoadBalancerDNS:
    Description: Domain name for the internal loadbalancer
    Value: !GetAtt InternalLoadBalancer.DNSName
    Export:
      Name: 'InternalDomainName'

